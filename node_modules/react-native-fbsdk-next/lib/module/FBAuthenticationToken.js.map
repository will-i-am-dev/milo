{"version":3,"sources":["FBAuthenticationToken.js"],"names":["Platform","NativeModules","require","AuthenticationToken","FBAuthenticationToken","constructor","tokenMap","authenticationToken","nonce","graphDomain","Object","freeze","getAuthenticationTokenIOS","OS","Promise","resolve","reject","getAuthenticationToken","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;AAEA,MAAM;AAACA,EAAAA,QAAD;AAAWC,EAAAA;AAAX,IAA4BC,OAAO,CAAC,cAAD,CAAzC;;AACA,MAAMC,mBAAmB,GAAGF,aAAa,CAACG,qBAA1C;;AAQA;AACA;AACA;AACA,MAAMA,qBAAN,CAA4B;AAC1B;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;AAGEC,EAAAA,WAAW,CAACC,QAAD,EAAmC;AAAA;;AAAA;;AAAA;;AAC5C,SAAKC,mBAAL,GAA2BD,QAAQ,CAACC,mBAApC;AACA,SAAKC,KAAL,GAAaF,QAAQ,CAACE,KAAtB;AACA,SAAKC,WAAL,GAAmBH,QAAQ,CAACG,WAA5B;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD;AAED;AACF;AACA;;;AACkC,SAAzBC,yBAAyB,GAAoC;AAClE,QAAIZ,QAAQ,CAACa,EAAT,KAAgB,SAApB,EAA+B;AAC7B,aAAOC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AACD,WAAO,IAAID,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCb,MAAAA,mBAAmB,CAACc,sBAApB,CAA4CX,QAAD,IAAc;AACvD,YAAIA,QAAJ,EAAc;AACZS,UAAAA,OAAO,CAAC,IAAIX,qBAAJ,CAA0BE,QAA1B,CAAD,CAAP;AACD,SAFD,MAEO;AACLS,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,OAND;AAOD,KARM,CAAP;AASD;;AAvCyB;;AA0C5BG,MAAM,CAACC,OAAP,GAAiBf,qBAAjB","sourcesContent":["/**\n * @flow\n * @format\n */\n\n'use strict';\n\nconst {Platform, NativeModules} = require('react-native');\nconst AuthenticationToken = NativeModules.FBAuthenticationToken;\n\ntype AuthenticationTokenMap = {\n  authenticationToken: string,\n  nonce: string,\n  graphDomain: string,\n};\n\n/**\n * Represents an immutable access token for using Facebook services.\n */\nclass FBAuthenticationToken {\n  /**\n     The raw token string from the authentication response\n    */\n  authenticationToken: string;\n\n  /**\n     The nonce from the decoded authentication response\n    */\n  nonce: string;\n\n  /**\n    The graph domain where the user is authenticated.\n   */\n  graphDomain: string;\n\n  constructor(tokenMap: AuthenticationTokenMap) {\n    this.authenticationToken = tokenMap.authenticationToken;\n    this.nonce = tokenMap.nonce;\n    this.graphDomain = tokenMap.graphDomain;\n    Object.freeze(this);\n  }\n\n  /**\n   * Getter for the authentication token\n   */\n  static getAuthenticationTokenIOS(): Promise<?FBAuthenticationToken> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(null);\n    }\n    return new Promise((resolve, reject) => {\n      AuthenticationToken.getAuthenticationToken((tokenMap) => {\n        if (tokenMap) {\n          resolve(new FBAuthenticationToken(tokenMap));\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  }\n}\n\nmodule.exports = FBAuthenticationToken;\n"]}